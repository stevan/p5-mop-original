
=pod

=head1 NAME

Perl 5 MOP - Internals - Rants

=head1 DESCRIPTION

B<WARNING> - This document contains opinions and B<opinions only>, I am
leaving these rants out of the other documents because they are exactly
that, rants. I personally have some strong opinions about the existing
object system and how the newly proposed one would best be implemented,
but I am not so egotistical as to believe that I am actually right.

Please take all rants contained herein with a large camel-size chunk
of salt.

=head2 The problem with HASH based instances

The HASH ref instance has served Perl well over the many years when it was
considered the defacto instance structure. However, the HASH ref based
instance has some very well known issues.

One of the most common issues is that of typos on key names are not
compile-time detected, if detected at all. The recent trend of
Inside-Out objects aimed itself at trying to fix this by inverting the
instance structure such that a typo would result in a compile-time
syntax error.

Another very common issue is the complete lack of privacy for not only
the individual instance slots, which can be accessed by anyone anywhere,
but also on the entire instance structure itself. Recent trends have
pushed hard the fact that this is considered "rude" and that accessor
methods should always be used instead. However, while it is certainly
good taste (and common OO practice in most all languages) to force the
use of accessor methods I<outside> of an object's methods, it is not so
true for access I<inside> of an object's methods.

Still another less common issue is object identity. In a single threaded,
single process non-networked application, then using the existing Perl
convention of "reference address as object identity" would be fine. But
we live in a heavily threaded multi-process networked world and this is
simply not sufficient.

It is my opinion that the best way to do this is to create a defacto
instance structure for use with a new style Perl OO. By creating a
C-level component that mimics the instance structure described and
the prototype, I believe we would solve all of these issues in a
satisfactory way.

=head2 The problem with Package based dispatching

The classic Perl object system uses packages, and the underlying
stashes, as the main means of location and dispatching of methods.

The first problem with this is that there is no (simple) way to
distinguish between methods and functions, nor is there any good
way to distinguish between class methods and instance methods.
Simply put, if it is in the package stash, it can be dispatched
on, regardless of the suitability of the actual code reference.
And worst of all, most of these issues are not detectable either
at compile time or at runtime, expect through their failures.

The second problem is with how inheritance is dispatched. The
magical C<@ISA> variable is expected to contain a string which
represents a package name. That package name is then looked up
internally and the same local package dispatching rules are
then applied. No only does this open up the possibility of
"typo as bug", but because the C<@ISA> variable must be declared
with C<our> it is not private to the package and therefore
is exposed to outside code. Of course this is considered "rude"
much like violating instance encapsulation is, but the fact
remains that it is still exposed.

To compound this second problem, the newly added C<mro> features,
while better encapsulated behind an API, still deal with strings
as package names.

In short, the "class is just a package" system is fragile and
produces very difficult to resolve ambiguity, both due to the fact
that the package and stash serve too many, sometimes conflicting,
purposes at once.

Some of the details of this are discussed here:
L<http://www.nntp.perl.org/group/perl.perl5.porters/2011/09/msg177017.html>

=head2 The problem with class being "just a package"

As was touched on in previous rant, it is my opinion that
the package based object system, while very powerful and flexible,
is ultimately not the right foundation upon which to build.

B<The first major issue is with methods and the whole question of
what is a method.>

As was mentioned above, it is difficult to distinguish between
functions and methods within a package. In fact, it is only possible
to really distinguish between imported functions and locally defined
functions/methods with any degree of certainty. To distinguish between
a method or a function would require guessing the intent of the defined
C<sub> by examining the code within its body. The same is true of
trying to determine if a method is a class method or an instance
method, and made even trickier by the dual-use methods which are a
not un-common trick in classic Perl OO.

It is an almost impossible task to divine the intended use of
a CODE entry in a stash with any degree of certainty, without that
certainty fading pretty quickly into guesswork and reliance on
idiomatic code patterns. The result is that we have a dispatch
table that is potentially cluttered with entries to which it
should never dispatch.

B<The second issue really has to do with a package only being
suitable storage for methods.>

Classic Perl OO carries with it no real concept of "attributes"
or "members". This is the instance slot data which, in most
modern OO languages, is typically defined in the class and then
used to build the instance slots. There were a number of
attempts over the years to solve this problem, but nothing has
really caught on except for L<Moose>.

I believe that this stems from the fact that a package (and
the underlying stash) do not actually have a way to store this
type of data.

Each stash entry is a name which can hold any of the following
types of items at one time; C<SCALAR>, C<ARRAY>, C<HASH>, C<CODE>
and C<GLOB>. To store some kind of attribute definition in one
of these slots would require a fairly large amount of wizardry
to make it useful in an OO context. But even if that were done,
the same issue we have with methods would arise. There would be
no way to determine the intention of that usage.

B<The final issue has to do with inheritance.>

In classic Perl OO, inheritance is determined by looking at
the C<@ISA> for a string which should match the name of another
package. The C<@ISA> variable has no special status and is
simply just another variable. The fragility of this is obvious
and while an elegant solution for its time, is not something
suitable for building a future upon.

In conclusion, using a package as a means of defining a class
is elegant and simple, but breaks down pretty quickly when
attempting to manage a large class hierarchy. Its lack of
structure forces people to adopt conventions to stay consistent,
but fails to provide to good ways to actually enforce those
conventions.

=head2 The problem of C<bless>

As described above, classes are defined simply as packages in
which certain assumptions are made about the contents. But this
is only part of an OO system, it leaves out the instances
of the classes. Enter the C<bless> function.

Any Perl reference (C<SCALAR>, C<ARRAY>, C<HASH>, C<CODE>
or C<GLOB>) can be C<bless>-ed into a package (specified again
by a string name). The resulting blessed instance can then be
used to dispatch methods, which are just C<CODE> entries in
the package.

While convention dictates the use of a C<new> method in your
package to define your objects, this is only convention and
there is nothing to prevent wildly different structures from
being blessed into the same package.

This breaks what I believe is a fundamental concept of an
object system. Which is that the class should be a factory
for the creation of instances. Instead it places this
responsibility upon the user to do any number of different
ways. This is, IMO, a case where TIMTOWTDI has been a
hindrance rather then a help.

=head2 TIMTOWTDI-BSCINABTE

This states that: "There is more then one way to do it, but
consistency is not a bad thing either". It has long been
acknowledged that TIMTOWTDI is a double-edged sword and has
a particularly insidious dark side. To see this in all its
glory, simply spend a hour or two reading the source of
randomly chosen CPAN modules.

XXX - explain that large scale OO requires consistency
XXX - explain that convention is no way to reliably handle this
XXX - explain that if Perl is to compete in large scale app
      building, it must fix this at a language level

=head1 AUTHOR

Stevan Little E<lt>stevan.little@iinteractive.comE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright 2011 Infinity Interactive, Inc.

L<http://www.iinteractive.com>

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
