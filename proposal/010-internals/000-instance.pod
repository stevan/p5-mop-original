
=pod

=head1 NAME

Perl 5 MOP - Internals - The Instance Structure

=head1 DESCRIPTION

So the first thing we need to discuss about the internals is the instance
structure itself. Every object in the entire MOP eco-system will be
represented with one of these, so it is important to describe them first.

=head2 The structure of an instance

This describes the basic structure of the instance, it is expected that
this is a C-level component. The exact implementation details are still
up for debate, but in some way each instance of a new-style class should
have access the information described here.

There should also be Perl-level access to this information through the
functions in the L<mop::internal::instance> package. These functions
will likely be implemented in C and be what is used internally.

=over 4

=item B<OID>

Object identity is a very important thing, especially in the highly
distributed and networked world we live in. Not only should an identity
be thread-safe, but it should also be safe across process boundaries as
well as machine boundaries. These identities should also not be reused when
an object is destroyed, avoiding the problem described in
L<https://metacpan.org/module/Object::ID#Why-not-just-use-the-objects-reference->

B<AUTHORS NOTE>

A UUID or GUID could be used to accomplish this, and is what is used
by the prototype, but it might be become a memory bloat issue. If so,
we could use something else as long as it meet the above described
criteria.

=item B<Class pointer>

At the most basic level, an object must know what class created it so
that it knows where to find the methods that can be called on it. This
is also very important for programmatic introspection of the MOP.

=item B<Slot container>

This is a set of key-value pairs that holds the data for each slot.

B<AUTHORS NOTE>

In the prototype this is represented with a HASH ref whose keys all have
a sigil on them and whose values are all SCALAR references. The reason
behind this particular data structure is that it is what is compatible
with the C<PadWalker::set_closed_over> function. The reason for this
will become more obvious when we discuss methods in that document.

It should also be noted that this is simply an implementation choice,
and I am very open to other suggestions assuming they can meet the
criteria described here and in later documents.

=back

=head1 NOTES

=head2 What about just blessed HASH refs?

It is possible that this can simply be a blessed HASH ref with some
slightly different "magic" attached to it. This magic would understand
how to access the other above defined information, dispatch differently,
etc. 

As I am unfamiliar with the perl guts, I am unsure if this is a sane 
route or not, but it is most certainly up for discussion.

=head1 RELATED

=over 4

=item L<100-rants.pod>

Personally I am not a fan of HASH ref based instances, and in
"The problem with HASH based instances" section of the linked
document I explain this in more detail. This should be viewed only
as opinion and not as any guiding principle.

=back

=head1 AUTHOR

Stevan Little E<lt>stevan.little@iinteractive.comE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright 2011 Infinity Interactive, Inc.

L<http://www.iinteractive.com>

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut