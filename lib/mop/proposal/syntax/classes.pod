=pod

=head1 NAME

Perl 5 MOP - Syntax & Semantics - Classes

=head1 DESCRIPTION

This document introduces the proposed class syntax for the
new object system for Perl.

=head1 SYNTAX

The main component of any object system is the class
declarations, and for this we propose a new C<class> keyword
with which to declare classes.

=head2 Class definition

The new C<class> keyword helps to separate the old style
classes from the new style classes. This will not only
contribute to easier to maintain backwards compatibility,
but will allow us to contain all the other syntactic
extensions within it.

Keep in mind that the C<class> keyword is really just sugar
around the construction of an instance of C<Class>, for more
information about this refer to the documents in the
F<000-mop> directory. For instance, the following two lines
would be equivalent:

  class Foo {}

  *Foo = Class->new( name => 'Foo' );

The syntax of a C<class> definition has two variants, I
will describe each one here, after which I will delve into
the exact definition of a class body.

=over 4

=item C<< class <NAME> { <BODY> } >>

This is the simplest variant and it is simply the C<class>
keyword, followed by a name, followed by block in which
the class body would be defined.

A simple example of this would be:

  class Foo {}

The name would conform to the same rules as package and
subroutine names in Perl, which is that it must begin with
an non-numeric character and is followed by any number of
other characters after that.

=item C<< class <NAME> (<METADATA>) { <BODY> } >>

This is the variant where we provide custom metadata to the
class itself. The metadata will be simply a perl-expression
which will be evaluated at class creation time and passed
into the underlying class constructor (see L<001-metadata.pod>
for more details about what metadata is and how it behaves).

Here is a simple example of this:

  class Foo ( is_closed => 1 ) {}

Here the metadata being passed is a simple flag that,
assuming the class object supports it, would tell the
metaclass that the class should be 'closed' (for whatever
that means as determined by your metaclass).

  *Foo = Class->new( ..., is_closed => 1 );

The are two special conditions here, which need to be
discussed.

First, if you pass in the key C<extends> and a single
class, this will set the superclass accordingly. So
for example, the following two lines are equivalent:

  class Foo ( extends => Bar ) {}

  *Foo = Class->new( ..., superclass => Bar );

Second, if you pass in the key C<metaclass> then the value
of this will be used as the metaclass to construct this
class with. So for example, the following two lines are
equivalent:

  class Foo ( metaclass => FooMeta ) {}

  *Foo = FooMeta->new( name => 'Foo', ... );

It is important to note that the metaclass is not
given as a string, but as a first-class citizen bareword.

=back

Additionally, there would also be unnamed, or anonymous
variants of the class syntax as well. These would look
and act the same way, just without a name. The details of
this are still pending.

=head2 Constructor/Destructor definition

We propose that constructors and destructors actually be
treated differently then regular methods. The reason being
that we believe that you should not be able dispatch to
the constructor or destructor in the normal way of method
dispatching. Hence the definition of these methods must
be a little special as well.

So in addition to the class keyword, we propose that there
be a special syntax for constructors and destructors. Here
is an example:

  class Foo {
      has $bar;

      BUILD ( $params ) {
          $bar = IO::File->new( $params->{'filename'} );
      }

      DEMOLISH {
          $bar->close;
      }
  }

It is important to note that these are actually instances
of the Method class, but they are just not stored in the
same way as normal method.

While the C<DEMOLISH> destructor does not get any methods,
the C<BUILD> constructor actually gets a HASH ref of the
parameters that were passed to C<new>.

=head3 Order of operations

When an object is created, first the instance is constructed
using the attributes defined in the class and its superclasses.
Then, all the constructors within the class hierarchy are
called in reverse order.

Similarly, when an object is destroyed, all the destructors
within the class hierarchy are called, in normal order.

=head1 QUESTIONS

=head2 How do classes interact with packages?

A class is a first-class citizen, which means it should behave in a
way similar to subroutines. So given the following code:

  package Foo;
  use strict;
  use warnings;

  class Bar { ... }

In order to access the class C<Bar> you would need to use the fully
qualified name C<Foo::Bar>.

Additionally all the variables and subroutines inside the package
would be visible inside the class, and the class itself visible
to the subroutines in the package. This would mean that in the
following code:

  package Foo;
  use strict;
  use warnings;
  sub get_bar { Bar->new }
  class Bar { ... }

Calling C<Foo::get_bar> would return an instance of the C<Bar> class.
And in the following code:

  package Foo;
  use strict;
  use warnings;
  our $BAZ = 100_000;
  class Bar {
      method get_foo_baz { $BAZ }
  }

Calling the C<get_foo_baz> method on an instance of C<Bar> would
return the value of C<$BAZ>.

Additionally the C<__PACKAGE__> variable in C<Bar> would be "Foo"
just as it would be inside the package scope.

=head2 How can I export methods from my class?

Surely a sane person would never do this, however it is not uncommon
in the Perl world to provide both a procedural and object-oriented
interface to a CPAN module. So in order to accomplish this goal,
instead of exporting methods, you use the relationship between the
classes and package to do this in a sane way. The best way to show
this is actually to just show code.

  package Foo;
  use strict;
  use warnings;
  use Exporter;

  our @EXPORT = ('bar');

  my $foo_instance = OO->new;

  sub bar { $bar_instance->bar }

  class OO {
      method bar { ... }
  }

The result of this is that you (sanely) export a package sub C<foo>
which has access to an instance of the OO interface, while still
retaining the OO interface through the C<Foo::OO> class.

=head2 How does C<strict> and C<warnings> affect classes?

The same way C<strict> and C<warnings> affect subroutines, if
statements, and other blocks of code: classes use the usual lexical
scope mechanisms for strictures and warnings.

=head2 Can I use C<my> or C<our> within a class?

It is my opinion that no, this should not be allowed directly inside
a class. That said, any variables declared with C<my> or C<our> in the 
enclosing package will be visible within the class definition. You can
of course use C<my> and C<our> inside your methods as well.

=head2 Can I define a C<sub> within a class?

Again, I am of the opinion that no, this should not be allowed. The
same reason as stated above applied. Any C<sub> defined in the
enclosing package will be visible, so there is no need to declare
then within the class definition.

=head1 NOTES

I wonder if the best way to handle the class barewords would be to
add a CLASS slot into the TYPEGLOB? To go along with the existing
SCALAR, ARRAY, HASH, IO, etc.

=head1 AUTHOR

Stevan Little E<lt>stevan.little@iinteractive.comE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright 2011 Infinity Interactive, Inc.

L<http://www.iinteractive.com>

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut